#!/bin/bash
nrnlog=/tmp/nrnlog$$
exec > $nrnlog
exec 2>&1
set -x

# for debugging
dialog() {
  osascript -e "tell app \"Installer\" to display dialog \"$1\""
  return 0
}

echo "" > /tmp/temp.tmp

idir=/Applications/NEURON-@PACKAGE_VERSION@/nrn

#for testing on linux
#idir=$HOME/neuron/nrnmpi
#function osascript() {
#  echo "osascript $1 $2 button returned:Yes" >> /tmp/temp.tmp
#  echo "button returned:Yes"
#}

#Use .bashrc if it exists, otherwise .bash_profile
#also add to .cshrc, .tcshrc, .kshrc, and  .zshrc if they exist
b=.bashrc
if test ! -f "$HOME/$b" ; then
  b=.bash_profile
fi
bp=$HOME/$b
blike="$bp"
clike=''
if test -f "$HOME/.cshrc" ; then
  clike="$HOME/.cshrc"
fi
if test -f "$HOME/.tcshrc" ; then
  clike="$clike $HOME/.tcshrc"
fi
if test -f "$HOME/.zshrc" ; then
  blike="$blike $HOME/.zshrc"
fi
if test -f "$HOME/.kshrc" ; then
  blike="$blike $HOME/.kshrc"
fi

# if cannot find nrniv, then perhaps modify PATH
echo "PATH=$PATH" >> /tmp/temp.tmp
# can nrniv be found in the users path?
if test -f "$bp" ; then
  (source $bp ; echo "srcpath $PATH" >> /tmp/temp.tmp ; echo `which nrniv` >> /tmp/temp.tmp ; which nrniv)
  a=$?
  echo "1 a=$a" >> /tmp/temp.tmp
  if test "$a" = "0" ; then
    addpath=yes
  else
    addpath=yes
  fi
  echo "PATH=$PATH" >> /tmp/temp.tmp
  echo "in source addpath=$addpath" >> /tmp/temp.tmp
else
  addpath=yes
fi
echo "PATH=$PATH" >> /tmp/temp.tmp

echo "1 addpath=$addpath" >> /tmp/temp.tmp

if test "$addpath" = "yes" ; then
a=`osascript -e 'tell app "Installer" to display dialog "
Modify PATH to allow launching nrniv from Terminal?
  ... will append a line to  $HOME/'$b'
      and, if they exist, .cshrc .tcshrc .kshrc .zshrc
" buttons {"No", "Yes"} default button 2'`
  echo "2 a=$a" >> /tmp/temp.tmp
  if test "$a" = "button returned:Yes" ; then
    addpath=yes
  else
    addpath=no
  fi
fi

echo "2 addpath=$addpath" >> /tmp/temp.tmp

if test "$addpath" = "yes" ; then
  if test  ! -f "$bp" ; then
    echo '#!bin/bash' > "$bp"
  fi
  for i in $blike ; do
    echo "export PATH=\"$idir/x86_64/bin\":\$PATH #added by NEURON installer" >> "$i"
    chown $USER "$i"
  done
  if "$clike" != "" ; then
    for i in $clike ; do
      echo "set path = (\"$idir/x86_64/bin\" \$path) #added by NEURON installer" >> "$i"
      chown $USER "$i"
    done
  fi
fi

if true || test "$addpath" = "yes" ; then # Python environment
  addpyenv=no

  a=`osascript -e 'tell app "Installer" to display dialog "
Modify PYTHONPATH in $HOME/'$b' to allow a launch of Python to import neuron.
" buttons {"No", "Yes"} default button 2'`

  echo "3 a=$a" >> /tmp/temp.tmp
  if test "$a" = "button returned:Yes" ; then
    addpyenv=yes
  else
    addpyenv=no
  fi

  if test "$addpyenv" = "yes" ; then
    for i in $blike ; do
      echo "export PYTHONPATH=\"$idir/lib/python\":\$PYTHONPATH #added by NEURON installer" >> "$i"
      chown $USER "$i"
    done
    for i in $clike ; do
      echo "setenv PYTHONPATH \"$idir/lib/python\":\$PYTHONPATH #added by NEURON installer" >> "$i"
      chown $USER "$i"
    done
   if false ; then # no longer add NRN_PYLIB and PYTHONHOME
    tmpfile=/tmp/$$.tmp
    (source $bp ; echo "srcpath $PATH" >> /tmp/temp.tmp ; $idir/x86_64/bin/nrnpyenv.sh |sed -n 's/\(^export.*\)/\1 #added by NEURON installer/p' | sed '/PYTHONPATH/d' > $tmpfile)
    for i in $blike ; do
      cat $tmpfile >> "$i"
      chown $USER "$i"
    done
    for i in $clike ; do
      sed 's/export \(.*\)=\(".*"\)\(.*\)/setenv \1 \2 \3/' < $tmpfile >> "$i"
      chown $USER "$i"
    done
    rm -f $tmpfile
   fi
  fi
fi

# install command line tools?
if xcode-select -p 2>&1 | grep 'error: unable to get' ; then
  a=`osascript -e 'tell app "Installer" to display dialog "
Mod files cannot be linked into NEURON unless
Command Line Tools is installed.
Note: selecting \"Yes\" will also set the system date to the current
date via \"sntp -sS pool.ntp.org\" as \"xcode-select --install\" sometimes
fails if the date is not accurate.
Install now?
" buttons {"No", "Yes"} default button 2'`
  if test "$a" = "button returned:Yes" ; then
    b=`sntp -sS pool.ntp.org`
    xcode-select --install
    sleep 1
if false ; then
    osascript << EOD
      tell application "System Events"
        tell process "Install Command Line Developer Tools"
          keystroke return
          #click button "Agree" of window "License Agreement"
        end tell
      end tell
EOD
fi
    # wait for the "Install Command Line" process to quit or
    # kill it when "xcode-select -p" returns a good value since
    # sometimes it hangs at end with window still up
    pid=`ps ax | grep -v 'sed' | sed -n '/Install Command Line/s/^ *\([0-9]*\).*/\1/p'`
    set +x
    while kill -0 $pid > /dev/null ; do
      if xcode-select -p > /dev/null ; then
        kill -1 $pid
      fi
      sleep 5
    done
    set -x
  fi  
fi

download() {
  return 0
  CURL="$idir/x86_64/bin/curlprogress.app"
  osascript -e "tell app \"$CURL\" to launch"
  a=`osascript -e "tell app \"$CURL\" to download(\"$1\", \"$2\")"`
  return $a
}
  
instprogress() {
  CURL="$idir/x86_64/bin/curlprogress.app"
  osascript -e "tell app \"$CURL\" to launch"
  osascript -e "with timeout of 600 seconds" \
    -e "tell app \"$CURL\" to instprogress(\"$1\", \"$2\", \"$3\", \"$4\")" \
    -e "end timeout" &
  return $!
}
  
xquartz_install() {
  stage=$HOME/Downloads
  xquartzdmg=https://dl.bintray.com/xquartz/downloads/XQuartz-2.7.11.dmg
  xquartzdmg=`curl -L -k http://xquartz.org 2> /dev/null| sed -n 's/.*href="\(.*XQuartz[0-9.-]*\.dmg\)">.*/\1/p'`
  xquartz=`echo $xquartzdmg | sed -n 's/.*\(XQuartz[0-9.-]*\)\.dmg/\1/p'`
  xquartzpkg=/Volumes/$xquartz/XQuartz.pkg

  a=`download "$xquartzdmg" "$stage/xquartz.dmg"`

  LOG1=/tmp/temp1_$$
  hdiutil attach -verbose $stage/xquartz.dmg -mountroot /Volumes > "$LOG1" 2>&1 &
  pid=$!
  ps $pid
  instprogress "Opening xquartz.dmg", "$pid" 6000 "$LOG1"
  pidprog=`ps ax | grep -v 'sed' | grep -v 'osascript' | sed -n '/curlprogress/s/^ *\([0-9]*\).*/\1/'`
  ps $pidprog

  set +x
  while ps $pid > /dev/null 2>&1 ; do
    if grep 'The install was successful' "$LOG1" > /dev/null 2>&1 ; then
      kill -1 $pid
    fi
    sleep 5
  done
  set -x
  if kill -1 $pidprog ; then true ; fi #is there a better way to not quit on error?

  LOG2=/tmp/temp2_$$
  installer -dumplog -pkg $xquartzpkg -target / -lang en > "$LOG2" 2>&1 &
  pid=$!
  ps $pid
  instprogress "Installing XQuartz" "$pid" 7000 "$LOG2"
  pidprog=`ps ax | grep -v 'sed' | grep -v 'osascript' | sed -n '/curlprogress/s/^ *\([0-9]*\).*/\1/'`
  ps $pidprog

  # wait for the "installer" process to quit or
  # kill it when the LOG file has a "install was successful" line
  # sometimes the progress dialog  hangs at end with window still up
  # so kill that as well.
  set +x
  while ps $pid > /dev/null 2>&1 ; do
    if grep 'The install was successful' "$LOG2" > /dev/null 2>&1 ; then
      kill -1 $pid
    fi
    sleep 5
  done
  set -x
  if kill -1 $pidprog ; then true ; fi #is there a better way to not quit on error?

  ls -lH "$LOG"
  hdiutil detach /Volumes/$xquartz
  rm -r -f $stage/xquartz.dmg
  return 0
}

# install XQuartz?
if test ! -d /Applications/Utilities/XQuartz.app ; then
  a=`osascript -e 'tell app "Installer" to display dialog "
XQuartz is required to launch NEURON.
Install now?
" buttons {"No", "Yes"} default button 2'`
  if test "$a" = "button returned:Yes" ; then
    xquartz_install
    a=`osascript -e 'tell app "Installer" to display dialog "
XQuartz has been installed. Before launching NEURON, you need
to logout and login in order to activate XQuartz" buttons {"Ok"} default button 1'`
  else
    true
  fi
else
  true
fi

#single click button action for x11 when entering a window
#focus follows mouse
sudo -u $USER defaults write org.macosforge.xquartz.X11 wm_ffm -bool true
echo "defaults write" >> /tmp/temp.tmp

